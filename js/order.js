document.addEventListener('DOMContentLoaded', function() {
    const TOKEN = '7873217731:AAHZa7FLViCn-qyd4h2fFbXwy-TAac4rkp4';
    const CHAT_ID = '-1002512801230';
    const URL_API = `https://api.telegram.org/bot${TOKEN}/sendMessage`;
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const callModal = document.getElementById('call-modal');
    const modalClose = document.getElementById('modal-close');
    const orderMeasureBtn = document.getElementById('order-measure-btn');
    const callButton = document.getElementById('call-button');

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
    function openModal() {
        if (callModal) {
            callModal.classList.add('active');
            document.body.style.overflow = 'hidden';
        }
    }

    function closeModal() {
        if (callModal) {
            callModal.classList.remove('active');
            document.body.style.overflow = 'auto';
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏
    if (orderMeasureBtn) {
        orderMeasureBtn.addEventListener('click', function(e) {
            e.preventDefault();
            openModal();
        });
    }

    if (callButton) {
        callButton.addEventListener('click', function(e) {
            e.preventDefault();
            openModal();
        });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
    if (modalClose) {
        modalClose.addEventListener('click', function(e) {
            e.preventDefault();
            closeModal();
        });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª–∫–∏
    if (callModal) {
        callModal.addEventListener('click', function(e) {
            if (e.target === callModal) {
                closeModal();
            }
        });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && callModal.classList.contains('active')) {
            closeModal();
        }
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    function showSuccessMessage(element, message) {
        if (element) {
            element.textContent = message || '–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.';
            element.classList.remove('disp');
            setTimeout(() => {
                element.classList.add('disp');
            }, 3000);
        } else {
            alert(message || '–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
        }
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞
    const form = document.getElementById('contact-form');
    const successElement = document.querySelector('.succes');

    if (form) {
        form.addEventListener('submit', function(e) {
            e.preventDefault();

            const nameInput = document.getElementById('name');
            const phoneInput = document.getElementById('phone');
            const messageInput = document.getElementById('message');

            if (!nameInput || !phoneInput || !messageInput) {
                console.error('–û–¥–∏–Ω –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                return;
            }

            const messageText = `üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n<b>–ò–º—è:</b> ${nameInput.value}\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneInput.value}\n<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${messageInput.value || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n#–ó–∞—è–≤–∫–∏`;

            axios.post(URL_API, new URLSearchParams({
                chat_id: CHAT_ID,
                parse_mode: 'HTML',
                text: messageText
            }), {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            })
            .then(() => {
                showSuccessMessage(successElement, '–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
                form.reset();
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
                showSuccessMessage(successElement, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
            });
        });
    }

    // –§–æ—Ä–º–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    const callForm = document.getElementById('call-form');
    const modalSuccessElement = document.querySelector('.modal-succes') || successElement;

    if (callForm) {
        callForm.addEventListener('submit', function(e) {
            e.preventDefault();

            const name = document.getElementById('modal-name');
            const phone = document.getElementById('modal-phone');
            const time = document.getElementById('modal-time');

            if (!name || !phone || !time) {
                console.error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—è –º–æ–¥–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã');
                return;
            }

            const timeMapping = {
                any: '–õ—é–±–æ–µ –≤—Ä–µ–º—è',
                morning: '9:00 - 12:00',
                day: '12:00 - 15:00',
                evening: '15:00 - 19:00'
            };

            const messageText = `üìû –ó–∞–∫–∞–∑ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞!\n\n–ò–º—è: ${name.value}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone.value}\n–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è: ${timeMapping[time.value]} \n\n#–ó–≤–æ–Ω–∫–∏`;
            
            axios.post(URL_API, new URLSearchParams({
                chat_id: CHAT_ID,
                parse_mode: 'HTML',
                text: messageText
            }), {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            })
            .then(() => {
                showSuccessMessage(modalSuccessElement, '–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.');
                callForm.reset();
                closeModal();
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
                showSuccessMessage(modalSuccessElement, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
            });
        });
    }

    // –ú–∞—Å–∫–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    function initPhoneMask(selector) {
        const phoneField = document.getElementById(selector);
        if (phoneField) {
            phoneField.addEventListener('input', function(e) {
                let value = e.target.value.replace(/\D/g, '');
                if (value.startsWith('375')) value = '+' + value;
                const matches = value.match(/^(\+375)(\d{0,2})(\d{0,3})(\d{0,2})(\d{0,2})$/);
                
                if (matches) {
                    e.target.value = `${matches[1]} (${matches[2]}) ${matches[3]}-${matches[4]}-${matches[5]}`.trim();
                }
            });
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å–æ–∫
    initPhoneMask('phone');
    initPhoneMask('modal-phone');
});